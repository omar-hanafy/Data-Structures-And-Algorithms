package trees.heaps;import java.util.Arrays;public class Heap {    private final int[] heap;    private int size;    Heap(int capacity) {        heap = new int[capacity];    }    public boolean isFull() {        return size == heap.length;    }    public int size() {        return size;    }    public int peak(){        return heap[0];    }    public void insert(int value) {        if (isFull()) {//            // todo: resize the array;//            int[] tempArray = new int[heap.length * 2];//            System.arraycopy(heap, 0, tempArray, 0, heap.length);//            heap = tempArray;            throw new IndexOutOfBoundsException("Heap if Full");        }        heap[size++] = value;        heapify(size - 1);    }    public void delete(int index) {        if (index > size - 1) {            System.out.println("no value founded");        }        int leafValue = heap[size - 1];        int deletedValue = heap[index];        heap[index] = leafValue;        heap[size - 1] = 0;        heapify(index);        heapifyDelete(index);        size--;//        return deletedValue;    }    private void heapifyDelete(int index) {        if (getLeftPosition(index) < heap.length - 1) {            heapify(getLeftPosition(index));            heapifyDelete(getLeftPosition(index));        }        if (getRightPosition(index) < heap.length - 1) {            heapify(getRightPosition(index));            heapifyDelete(getRightPosition(index));        }    }    private int getRightPosition(int index) {        return 2 * index + 1;    }    private int getLeftPosition(int index) {        return 2 * index + 2;    }    private void heapify(int index) {        if (heap[index] > heap[getParentIndex(index)]) {            System.out.println("parent of " + heap[index] + " = " + heap[getParentIndex(index)]);            swap(index, getParentIndex(index));            heapify(getParentIndex(index));        }    }    private void swap(int index, int parentIndex) {        int tempValue = heap[parentIndex];        heap[parentIndex] = heap[index];        heap[index] = tempValue;    }    public int getParentIndex(int index) {        return (index - 1) / 2;    }    public void printHeap() {        System.out.println(Arrays.toString(heap));    }}