package sorts.merging;import java.util.Arrays;public class Main {    public static void main(String[] args) {        int[] intArray = {20, 35, -15, 55, 55, 1, -22};        mergeSort(intArray, 0, intArray.length);        System.out.println(Arrays.toString(intArray));    }    // { 20, 35, -15, 7, 55, 1, -22 }    public static void mergeSort(int[] array, int start, int end) {        if (end - start < 2) {            return;        }        int mid = (start + end) / 2;        mergeSort(array, start, mid);        mergeSort(array, mid, end);        merge(array, start, mid, end);    }    // { 20, 35, -15, 55, 55, 1, -22 }    public static void merge(int[] array, int start, int mid, int end) {        if (array[mid - 1] <= array[mid]) {            //the reason that this array is stable, it's not doing anything if the sibling arrays are identical.            return;        }        int tempStart = start;        int tempMid = mid;        int tempIndex = 0;        int[] temp = new int[end - start];        while (tempStart < mid && tempMid < end) {            if (array[tempStart] <= array[tempMid]) {                temp[tempIndex] = array[tempStart];                tempIndex++;                tempStart++;            } else {                temp[tempIndex] = array[tempMid];                tempIndex++;                tempMid++;            }//            temp[tempIndex++] = array[i] <= array[j] ? array[i++] : array[j++];        }        //System.arraycopy(Object src,  int  sourcePosition, Object destinationArray, int destinationPosition, int length);        System.arraycopy(array, tempStart, array, start + tempIndex, mid - tempStart);        System.arraycopy(temp, 0, array, start, tempIndex);    }}